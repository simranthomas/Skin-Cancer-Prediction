/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ocrPack;

import ANN.NeuralNetwork;
import LibPack.ImageSet;
import LibPack.SingleImage;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.util.Timer;
import java.util.TimerTask;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;

/**
 *
 * @author Parth
 */
public class Training extends javax.swing.JFrame {

    /**
     * Creates new form Training
     */
    MainForm parent;
    BufferedImage biIn;
    Graphics2D g2dIn;
    int inPixels[][];
    int h = 10;
    int w = 10;
    //char[] charsToScan = new char[]{'C'};
    public String folderPath;
    Timer timer;
    File[] listOfFiles;
    int totalOutput;
    int totalTrainingImagesEach = 14;

    public Training(MainForm parent) {
        this.parent = parent;
        initComponents();

        Dimension sd = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation(sd.width / 2 - this.getWidth() / 2, sd.height / 2 - this.getHeight() / 2);



        inPixels = new int[h][w];


        biIn = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
        g2dIn = biIn.createGraphics();
        g2dIn.setBackground(Color.white);
        g2dIn.clearRect(0, 0, w, h);
        jLabelIpImage.setIcon(new ImageIcon(biIn));




    }

//    void mySave(int mydata[][], String fname) {
//        try {
//            BufferedImage biimg = new BufferedImage(200, 200, BufferedImage.TYPE_INT_RGB);
//            for (int y = 0; y < 200; y++) {
//                for (int x = 0; x < 200; x++) {
//                    biimg.setRGB(x, y, mydata[y][x]);
//                }
//            }
//            ImageIO.write(biimg, "jpg", new File(System.getProperty("user.dir") + "\\" + fname + ".jpg"));
//        } catch (Exception e) {
//            System.out.println("Error saving image : " + e);
//        }
//    }
    public int getDistance(Point p1, Point p2) {
        return (int) (Math.sqrt(Math.pow(p2.y - p1.y, 2) + Math.pow(p2.x - p1.x, 2)));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabelIpImage = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton2 = new javax.swing.JButton();
        jLabelStatus = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jProgressBar2 = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Cancer Detection Training");

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("MAIN MENU");

        jPanel3.setBackground(new java.awt.Color(245, 233, 220));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        new JavaLib.LoadForm();
        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        new JavaLib.LoadForm();
        jLabelIpImage.setBackground(new java.awt.Color(221, 214, 197));
        jScrollPane2.setViewportView(jLabelIpImage);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton2.setText("Load Training Set");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabelStatus.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jLabelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton3.setText("Apply Training");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 273, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        parent.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        JFileChooser j = new JFileChooser();
        j.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        j.setCurrentDirectory(new File(System.getProperty("user.dir") + "//TrainingSet"));
        j.showOpenDialog(this);
        folderPath = j.getSelectedFile().getPath();

        MyTimerTask task = new MyTimerTask();
        timer = new Timer();
        timer.schedule(task, 100);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        parent.imageSet= new ImageSet();
        TrainTimerTask tt = new TrainTimerTask();
        Timer ttt = new Timer();
        ttt.schedule(tt, 100);
    }//GEN-LAST:event_jButton3ActionPerformed

    class TrainTimerTask extends TimerTask {

        NeuralNetwork nn;

        @Override
        public void run() {
            jProgressBar2.setIndeterminate(true);
            nn = null;
            parent.readFrom();
            totalOutput = 2;
            int layers[] = new int[3];
            layers[0] = 100;
            layers[1] = 100 + 1;
            layers[2] = totalOutput;
            long iter = 10000;
            double per = 0;
            int tp, fp;
            tp = fp = 0;
            double tr_inp[][] = null;
            double tr_out[][];
            int iteration = 0;


            System.out.println("Called Timer Task");

            tr_inp = new double[parent.imageSet.imageSet.size()][100];
            tr_out = new double[parent.imageSet.imageSet.size()][totalOutput];
            tr_inp = fillInputFeature();
            tr_out = fillOutputFeature();


            while (per < 80) {
                iteration++;
                //   System.out.println("True Positive:  " + per + "  Iteration " + iteration);
                tp = fp = 0;
                nn = new NeuralNetwork(0.1, 3, layers);


                try {
                    for (int i = 0; i < iter; i++) {
                        for (int j = 0; j < tr_inp.length; j++) {
                            nn.train(tr_inp[j], tr_out[j]);
                        }

                    }
                } catch (Exception e) {
                    System.out.println("Error  ::" + e);
                    e.printStackTrace();
                }

                for (int i = 0; i < tr_inp.length; i++) {

                    nn.setInputs(tr_inp[i]);
                    double curr_out_D[] = nn.runNetwork();
                    int output = convertToInt(curr_out_D);
//                    if (i < 14) {
//                        if (output == 0) {
//                            tp++;
//                        } else {
//                            fp++;
//                        }
//                    } else {
//                        if (output == 1) {
//                            tp++;
//                        } else {
//                            fp++;
//                        }
//
//                    }
                    System.out.println("OP: " + output + "  (" + curr_out_D[0] + "," + curr_out_D[1] + ")");
                    if (tr_out[i][output] == 1.0) {
                        tp++;
                    } else {
                        fp++;
                    }

                }
                per = (tp * 100 * 1.0) / tr_inp.length;
                jTextArea1.setText("Total Percent:  " + per);
                System.out.println("True Positive:  " + per);
                // parent.clearText("");
            }


            System.out.println("True Positive:  " + (tp * 100 * 1.0) / tr_inp.length);
            System.out.println("False Positive:  " + (fp * 100 * 1.0) / tr_inp.length);

            try {
                ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(new File(System.getProperty("user.dir") + "\\train.dat")));
                out.writeObject(nn);
                out.close();

            } catch (Exception e) {
                System.out.println("Error: " + e);

            }

            //parent.addText("Done Training.");


            jProgressBar2.setIndeterminate(false);

        }
    }

    public int convertToInt(double outD[]) {
        int outI[] = new int[outD.length];
        double max = 0.0;
        int index = 0;
        for (int i = 0; i < outD.length; i++) {
            if (outD[i] > max) {
                max = outD[i];
                index = i;
            }
        }
        return index;
    }

    public double[][] fillInputFeature() {
        double ip[][] = new double[parent.imageSet.imageSet.size()][100];
        int rowIndex = 0;
        System.out.println("Char Size: " + parent.imageSet.imageSet.size());
        for (int i = 0; i < parent.imageSet.imageSet.size(); i++) {
            SingleImage sc = parent.imageSet.imageSet.get(i);
            // System.out.println("Each Char Size: "+sc.allChars.size());
            int colIndex = 0;
            for (int y = 0; y < 10; y++) {
                for (int x = 0; x < 10; x++) {
                    ip[rowIndex][colIndex] = (sc.HS[y][x][0] * 1.0) / 255;
                    colIndex++;
                }
            }

            rowIndex++;

        }
//        System.out.println("Input Features...");
//        for (int i = 0; i < parent.imageSet.imageSet.size(); i++) {
//            System.out.println("");
//            for (int j = 0; j < 100; j++) {
//                System.out.print(" " + ip[i][j]);
//
//            }
//
//        }
        return ip;



    }

    public double[][] fillOutputFeature() {
        double op[][] = new double[parent.imageSet.imageSet.size()][totalOutput];
        for (int i = 0; i < parent.imageSet.imageSet.size(); i++) {
            for (int j = 0; j < totalOutput; j++) {
                op[i][j] = 0;
            }
        }
        int totalRow = (parent.imageSet.imageSet.size());
        //System.out.print("Total Rows: " + totalRow);
        for (int i = 0; i < totalRow; i++) {
            if (i < totalTrainingImagesEach) {
                op[i][0] = 1;
            } else {
                op[i][1] = 1;
            }
        }


        return op;
    }

    int[][][] getHSV(BufferedImage rgbImage) {
        int hsvVal[][][] = new int[rgbImage.getHeight()][rgbImage.getWidth()][2];

        int h, s, v;
        int r, g, b, col;
        int rgbMin, rgbMax;

        //  System.out.println("Dimension:    " + rgbImage.getHeight() + "  " + rgbImage.getWidth());
        for (int yy = 0; yy < rgbImage.getHeight(); yy++) {
            for (int xx = 0; xx < rgbImage.getWidth(); xx++) {
                b = rgbImage.getRGB(xx, yy) & 0xff;
                g = (rgbImage.getRGB(xx, yy) >> 8) & 0xff;
                r = (rgbImage.getRGB(xx, yy) >> 16) & 0xff;
                //System.out.println("  " + r + "  " + g + "  " + b);
                h = s = v = 0;
                rgbMin = Math.min(Math.min(r, g), b);
                rgbMax = Math.max(Math.max(r, g), b);
                v = rgbMax;
                if (v == 0) {
                    h = s = 0;
                    hsvVal[yy][xx][0] = 0;
                    hsvVal[yy][xx][1] = 0;


                } else {
                    s = 255 * (rgbMax - rgbMin) / v;
                    if (s == 0) {
                        h = 0;
                        //thumbH.setRGB(xx, yy, 0);
                    } else {


                        if (rgbMax == r) {
                            h = 0 + 43 * (g - b) / (rgbMax - rgbMin);


                        } else if (rgbMax == g) {
                            h = 85 + 43 * (b - r) / (rgbMax - rgbMin);


                        } else if (rgbMax == b) {
                            h = 171 + 43 * (r - g) / (rgbMax - rgbMin);
                        }
                        if (h < 0) {
                            h = 255 + h;
                        }
                    }
                    hsvVal[yy][xx][0] = h;
                    hsvVal[yy][xx][1] = s;

                }
            }

        }
        return hsvVal;
    }

//     int[][] getHSV_HIST(BufferedImage rgbImage) {
//        int hsvVal[][][] = new int[rgbImage.getHeight()][rgbImage.getWidth()][3];
//        int[][] hist = new int[16][3];
//        for (int i = 0; i < 16; i++) {
//            for (int j = 0; j < 3; j++) {
//                hist[i][j] = 0;
//            }
//        }
//        int h, s, v;
//        int r, g, b, col;
//        int rgbMin, rgbMax;
//
//        //  System.out.println("Dimension:    " + rgbImage.getHeight() + "  " + rgbImage.getWidth());
//        for (int yy = 0; yy < rgbImage.getHeight(); yy++) {
//            for (int xx = 0; xx < rgbImage.getWidth(); xx++) {
//                b = rgbImage.getRGB(xx, yy) & 0xff;
//                g = (rgbImage.getRGB(xx, yy) >> 8) & 0xff;
//                r = (rgbImage.getRGB(xx, yy) >> 16) & 0xff;
//                //System.out.println("  " + r + "  " + g + "  " + b);
//                h = s = v = 0;
//                rgbMin = Math.min(Math.min(r, g), b);
//                rgbMax = Math.max(Math.max(r, g), b);
//                v = rgbMax;
//                if (v == 0) {
//                    h = s = 0;
//                    hsvVal[yy][xx][0] = 0;
//                    hsvVal[yy][xx][1] = 0;
//                    hsvVal[yy][xx][2] = 0;
//                } else {
//                    s = 255 * (rgbMax - rgbMin) / v;
//                    if (s == 0) {
//                        h = 0;
//                        hist[(int) v / 32][2] = hist[(int) h / 32][2] + 1;
//                        //thumbH.setRGB(xx, yy, 0);
//                    } else {
//                        
//                        
//                        if (rgbMax == r) {
//                            h = 0 + 43 * (g - b) / (rgbMax - rgbMin);
//                            
//                            
//                        } else if (rgbMax == g) {
//                            h = 85 + 43 * (b - r) / (rgbMax - rgbMin);
//                            
//                            
//                        } else if (rgbMax == b) {
//                            h = 171 + 43 * (r - g) / (rgbMax - rgbMin);
//                        }
//                        if (h < 0) {
//                            h = 255 + h;
//                        }
//                    }
//                    hsvVal[yy][xx][0] = h;
//                    hsvVal[yy][xx][1] = s;
//                    hsvVal[yy][xx][2] = v;
//                    //  System.out.println("  " + h + "  " + s + "  " + v);
//                    hist[(int) h / 32][0] = hist[(int) h / 32][0] + 1;
//                    hist[(int) s / 32][1] = hist[(int) h / 32][1] + 1;
//                    hist[(int) v / 32][2] = hist[(int) h / 32][2] + 1;
//                }
//            }
//            
//        }
//        return hist;
//    }
    class MyTimerTask extends TimerTask {

        @Override
        public void run() {
            //for(int i=0;i<26;i++){
            jProgressBar1.setIndeterminate(true);



            // System.out.println("Current Folder Path: " + newPath);
            File subFolderPath = new File(folderPath);
            listOfFiles = subFolderPath.listFiles();
            for (int i = 0; i < listOfFiles.length; i++) {
                SingleImage si = new SingleImage();
                String fname = subFolderPath + "\\" + (listOfFiles[i].getName());
                System.out.println("Fname:   " + fname);
                jLabelStatus.setText("Found Images: " + listOfFiles[i].getName());
                delay(50);

                if (new File(fname).exists()) {
                    //jLabelStatus.setText("File found!......Processing...");
                    try {
                        biIn = ImageIO.read(new File(fname));
                        g2dIn.drawImage(biIn, 0, 0, w, h, null);
                        jLabelIpImage.repaint();
                        si.HS = getHSV(biIn);
                    } catch (Exception e) {
                        System.out.println("Exception : " + e);
                        e.printStackTrace();
                    }
                    parent.imageSet.imageSet.add(si);
                }
            }
            jLabelStatus.setText("Read All Cancer & Non-Cancer Images!");

            jProgressBar1.setIndeterminate(false);
            parent.writeTo();


        }

        void delay(int time) {
            try {
                Thread.sleep(time);
            } catch (Exception e) {
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelIpImage;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JProgressBar jProgressBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
